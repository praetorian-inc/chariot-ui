import { ReactNode, useEffect, useMemo, useState } from 'react';
import {
  ChevronRightIcon,
  CommandLineIcon,
  DocumentTextIcon,
} from '@heroicons/react/24/outline';
import { Editor } from '@monaco-editor/react';
import { Tab, TabGroup, TabList, TabPanels } from '@headlessui/react';

import { Button } from '@/components/Button';
import { Loader } from '@/components/Loader';
import { Modal } from '@/components/Modal';
import { Snackbar } from '@/components/Snackbar';
import { NoData } from '@/components/ui/NoData';
import { useGetFile } from '@/hooks/useFiles';
import { copyToClipboard } from '@/utils/copyToClipboard.util';
import { getDescription } from '@/utils/risk.util';
import { StorageKey } from '@/utils/storage/useStorage.util';
import { useSearchParams } from '@/utils/url.util';
import { cn } from '@/utils/classname';
import { Tooltip } from '@/components/Tooltip';

export function ProofOfExploit() {
  const { searchParams, removeSearchParams } = useSearchParams();
  const rawRiskComposite = searchParams.get(StorageKey.POE) ?? '';
  const riskComposite =
    rawRiskComposite && decodeURIComponent(rawRiskComposite);

  const { data: file, status: fileStatus } = useGetFile({
    name: riskComposite,
  });

  const proofOfExploit = useMemo(() => {
    return getDescription(file);
  }, [file]);

  const tabs = useMemo(() => {
    return proofOfExploit ? Object.keys(proofOfExploit) : [];
  }, [proofOfExploit]);

  const [selectedTab, setSelectedTab] = useState(tabs[0]);

  useEffect(() => {
    setSelectedTab(tabs[0]);
  }, [tabs]);

  return (
    <Modal
      title="Proof of Exploit"
      open={Boolean(riskComposite)}
      onClose={() => removeSearchParams(StorageKey.POE)}
      size="xl"
      className="h-[60vh]"
      icon={<DocumentTextIcon className="size-6 text-default-light" />}
      footer={{
        left: (
          <div className="flex gap-2">
            {file?.['curl-command'] && (
              <Button
                styleType="secondary"
                startIcon={
                  <CommandLineIcon className="size-4 text-default-light" />
                }
                onClick={() => {
                  copyToClipboard(file['curl-command']);
                  Snackbar({
                    title: 'Command copied to clipboard.',
                    variant: 'success',
                    description: '',
                  });
                }}
              >
                Copy Command
              </Button>
            )}
            <Button
              styleType="secondary"
              startIcon={
                <DocumentTextIcon className="size-4 text-default-light" />
              }
              isLoading={fileStatus === 'pending'}
              disabled={!proofOfExploit}
              onClick={() => {
                copyToClipboard(String(proofOfExploit));
                Snackbar({
                  title: 'All content copied to clipboard.',
                  variant: 'success',
                  description: '',
                });
              }}
            >
              Copy All
            </Button>
          </div>
        ),
      }}
    >
      <Loader isLoading={fileStatus === 'pending'} type="spinner">
        {!proofOfExploit && <NoData title="No Proof of exploit found." />}
        {proofOfExploit && (
          <div className="h-full">
            <TabGroup
              className="flex h-full gap-6 "
              selectedIndex={tabs.indexOf(selectedTab)}
              onChange={index => setSelectedTab(tabs[index])}
            >
              <TabList className="border-1 w-44 shrink-0 overflow-auto border border-y-0 border-l-0 border-layer1 p-1 pr-4">
                {tabs.map(tab => {
                  const selected = tab === selectedTab;
                  return (
                    <Tab
                      key={tab}
                      className={cn(
                        'w-full py-4 px-2 text-sm font-semibold leading-5 hover:bg-gray-50 focus:outline-0 border-b-2 border-gray-100 bg-layer0',
                        selected && 'bg-layer1'
                      )}
                    >
                      <div className=" relative flex items-center">
                        <Tooltip title={tab}>
                          <div className="w-full truncate overflow-hidden mr-2">
                            {tab}
                          </div>
                        </Tooltip>
                        {selected && (
                          <ChevronRightIcon className="absolute right-0 size-4" />
                        )}
                      </div>
                    </Tab>
                  );
                })}
              </TabList>
              <TabPanels className="size-full overflow-auto pr-6">
                {tabs.map(tab => (
                  <Tab.Panel
                    key={tab}
                    className="bg-white rounded-xl p-3 h-full"
                  >
                    <code className="text-xs prose whitespace-pre-wrap">
                      {proofOfExploit[tab] as ReactNode}
                    </code>
                  </Tab.Panel>
                ))}
              </TabPanels>
            </TabGroup>
          </div>
        )}
      </Loader>
    </Modal>
  );
}
